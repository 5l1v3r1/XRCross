#!/bin/bash
# Created By pikpikcu
# [Suport Me And join Contributor:]
######################################################################
# These tools are still in development,                              #
# if there are any problems with these tools please let me know.     #
######################################################################

# Faforit Colors
BK=$(tput setaf 0) # Black
RD=$(tput setaf 1) # Red
GR=$(tput setaf 2) # Green
YW=$(tput setaf 3) # Yellow
BG=$(tput setab 4) # Background Color
PP=$(tput setaf 5) # purple
CY=$(tput setaf 6) # Cyan
WH=$(tput setaf 7) # White
NT=$(tput sgr0) # Netral
BD=$(tput bold) # Bold
###############################################
agent='User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:68.0) Gecko/20100101 Firefox/68.0'
codename='Sniper'
ver='1.6.2[Beta]'
follow='pikpikcu'
site=$1
IFS=$'\n'
dat=$(date +"%m-%d-%y[%r]")

# Dependenciess
dependencies(){
    if [ ! -f ~/go/bin/assetfinder ]; 
        then
        echo -e "${RD}[+]${GR} Assetfinder Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/subfinder ]; 
        then
        echo -e "${RD}[+]${GR} Subfinder Not Install!\n"
        exit 1  
    elif [ ! -f ~/go/bin/httprobe ];
        then
        echo -e "${RD}[+]${GR} httprobe Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/waybackurls ];
        then
        echo -e "${RD}[+]${GR} waybackurls Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/anti-burl ];
        then
        echo -e "${RD}[+]${GR} anti-burl Not Install!\n"
        exit 1 
    elif [ ! -f /usr/bin/js-beautify ];
        then
        echo -e "${RD}[+]${GR} js-beautify Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/hakrawler ];
        then
        echo -e "${RD}[+]${GR} hakrawler Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/hakcheckurl ];
        then
        echo -e "${RD}[+]${GR} hakcheckurl Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/gau ];
        then
        echo -e "${RD}[+]${GR} Gau Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/qsreplace ];
        then
        echo -e "${RD}[+]${GR} qsreplace Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/dalfox ];
        then
        echo -e "${RD}[+]${GR} dalfox Not Install!\n"
        exit 1  
    elif [ ! -f ~/go/bin/CORS-Scanner ];
        then
        echo -e "${RD}[+]${GR} CORS-Scanner Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/gf ];
        then
        echo -e "${RD}[+]${GR} gf Not Install!\n"
        exit 1 
    elif [ ! -f ~/go/bin/httpx ];
        then
        echo -e "${RD}[+]${GR} Httpx Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/github-subs ];
        then
        echo -e "${RD}[+]${GR} github-subs Not Install!\n"
        exit 1
    elif [ ! -f /usr/bin/jq ];
        then
        echo -e "${RD}[+]${GR} jq Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/dirsearch ];
        then
        echo -e "${RD}[+]${GR} dirsearch Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/hinject ];then
        echo -e "${RD}[+]${GR} hinject Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/qsreplace ];then
        echo -e "${RD}[+]${GR} qsreplace Not Install!\n"
        exit 1
    elif [ ! -f ~/go/bin/nuclei ];then
        echo -e "${RD}[+]${GR} nuclei Not Install!\n"
        exit 1

    fi
}
# XRCross running URL
all(){
    echo -e "\n${NT}[${RD}!${NT}] ${GR}Check Subdomain Enumerate...${NT}"
    command assetfinder --subs-only $site > $output/$site.txt
    cat $output/$site.txt | sort -u > $output/subs.txt
    rm -rf $output/$site.txt
    echo -e "${NT}[${RD}*${NT}]${GR} FOUND SUBDOMAINS ${NT}[${GR}$(cat $output/subs.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/subs.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Check the Subdomains for working HTTP and HTTPS servers...${NT}"
    cat $output/subs.txt | sort -u | httprobe | tee -a  > $output/$site-host.txt
    echo -e "${NT}[${RD}*${NT}]${GR} Resluts Live:${NT}[${GR}$(cat $output/$site-host.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/$site-host.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Grep Subdomains Status Response...${NT}"
    cat $output/subs.txt | hakrawler -plain | hakcheckurl | grep -v "404\|403\|500" > $output/$site-dir.txt 
    echo -e "${NT}[${RD}*${NT}]${GR} Found Status Dir ${NT}[${GR}$(cat $output/$site-dir.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/$site-dir.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Scraping wayback for data...${NT}"
    cat $output/subs.txt | waybackurls | sort -u > $output/$site-list.txt
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping${NT} [${GR}$(cat $output/$site-list.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/$site-list.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Grabing for data js...${NT}"
   # cat $output/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
    cat $output/$site-list.txt | sort -u | grep -P "\w+\.js(\?|$)" | sort -u > $output/jsurls.txt
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping${NT} [${GR}$(cat $output/jsurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/jsurls.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Grabing for data php...${NT}" 
    cat $output/$site-list.txt | sort -u | grep -P "\w+\.php(\?|$)" | sort -u > $output/phpurls.txt
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping${NT} [${GR}$(cat $output/phpurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/phpurls.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Grabing for data aspx...${NT}"
    cat $output/$site-list.txt | sort -u | grep -P "\w+\.aspx(\?|$)" | sort -u > $output/spurls.txt
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping${NT} [${GR}$(cat $output/aspurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/aspurls.txt]"
    echo -e "${NT}[${RD}!${NT}]${GR} Check Subdomain Open Redirection...${NT}"
    cat $output/subs.txt | grep -e 'redirect\|redirect=\|url\|url=\|next=\|dest=\|destination\|return\|go\|redirect_uri\|continue=\|return_path=\|externalLink=\|URL' > $output/$site-redirect.txt          
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check URL Redirection${NT} [${GR}$(ls $output/$site-redirect.txt  | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/$site-redirect.txt ]"
    echo -e "${NT}[${RD}!${NT}]${GR} Blind SSRF testing...]${NT}"
    ssr=`cat callback.txt`
    cat $output/subs.txt | waybackurls > $output/$site-ssrf.txt
    cat $output/subs.txt | gau >> $output/$site-ssrf.txt
    cat $output/$site-ssrf.txt | sort | uniq | grep "?" | qsreplace -a | qsreplace $ssr > $output/$site-ssrf2.txt
    sed -i "s|$|\&dest=$ssr\&redirect=$ssr\&uri=$ssr\&path=$ssr\&continue=$ssr\&url=$ssr\&window=$ssr\&next=$ssr\&data=$ssr\&reference=$ssr\&ssr=$ssr\&html=$ssr\&val=$ssr\&validate=$ssr\&domain=$ssr\&callback=$ssr\&return=$ssr\&page=$ssr\&feed=$ssr\&host=$ssr&\port=$ssr\&to=$ssr\&out=$ssr\&view=$ssr\&dir=$ssr\&show=$ssr\&navigation=$ssr\&open=$ssr|g" $output/$site-ssrf2.txt
    ffuf -w $output/$site-ssrf2.txt -u FUZZ -t 50  > $output/$site-ssrf3.txt
    #echo -e "Found Check SSRF [${GR}$(cat $output/ssrf/$site-ssrf3.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/$site-ssrf3.txt]"
    exit 1  
}
# Subdomain Enumerate
github(){
    if  dependencies
        then
        api=`cat Api-github.txt`
        echo -e "${NT}[${RD}*${NT}]${GR} Check the Subdomains for github...${NT}"
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR} Start On target:${NT} $site"
        github-subs -d $site -api $api > $output/github/$site.txt 
        cat $output/github/$site.txt | sort -u > $output/github/subs.txt 
        rm -rf $output/github/$site.txt
        for run in $(cat $output/github/subs.txt);do
            ping -c1 -W1 $run > /dev/null 2>&1
            if [[ $? -eq 0 ]];
                then
                echo -e "${RD}[${GR}*${RD}]${GR} VALID:${NT} $run" | tee -a $output/github/subs-valid.txt 

            else
                echo -e "${RD}[${GR}*${RD}]${RD} NOTVALID:${NT} $run" | tee -a $output/github/subs-notvalid.txt
            fi                
        done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} SUBDOMAINS Valid ${NT}[${GR}$(cat $output/github/subs-valid.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} SUBDOMAINS NotValid ${NT}[${GR}$(cat $output/github/subs-notvalid.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/github/subs.txt]"
    
}
subdo(){
    if  dependencies
        then
        echo -e "\n${NT}[${RD}*${NT}]${GR} Subdomain Enumerate...${NT}" 
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR} Start On target:${NT} $site\n"
        assetfinder --subs-only $site > $output/subdo/$site.txt 
        subfinder -silent -d $site >> $output/subdo/$site.txt 
        cat $output/subdo/$site.txt | sort -u > $output/subdo/subs.txt 
        rm -rf $output/subdo/$site.txt
        for run in $(cat $output/subdo/subs.txt);do
            ping -c1 -W1 $run > /dev/null 2>&1
            if [[ $? -eq 0 ]];
                then
                echo -e "${RD}[${GR}*${RD}]${GR} VALID:${NT} $run" | tee -a $output/subdo/subs-valid.txt 

            else
                echo -e "${RD}[${GR}*${RD}]${RD} NOTVALID:${NT} $run" | tee -a $output/subdo/subs-notvalid.txt
            fi                
        done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} SUBDOMAINS Valid ${NT}[${GR}$(cat $output/subdo/subs-valid.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} SUBDOMAINS NotValid ${NT}[${GR}$(cat $output/subdo/subs-notvalid.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/subdo/subs.txt]"
}
LFI1(){
    if  dependencies
        then
        echo -e "\n${NT}[${RD}*${NT}]${GR} Start Check LFI Vulnerabilty...${NT}" 
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR} Start On target:${NT} $site"
        echo -e "${NT}[${RD}*${NT}]${GR} Start Enumerate domain!!!${NT}"
        assetfinder --subs-only $site | sort -u > $output/lfi/$site.txt 
        subfinder -silent -d $site >> $output/lfi/$site.txt 
        echo -e "${NT}[${RD}*${NT}]${GR} Finall subdomain!!!${NT}"
        cat $output/lfi/$site.txt | httpx --silent | sort -u > $output/lfi/$site-final.txt
        echo -e "${NT}[${RD}*${NT}]${GR} Crawling wayback data!!!${NT}"
        cat $output/lfi/$site-final.txt | waybackurls | gf lfi | qsreplace | sort -u > $output/lfi/$site-data.txt 
        echo -e "${NT}[${RD}*${NT}]${GR} Start Check LFI Vulnerabilty!!!${NT}"
        nuclei -l $output/lfi/$site-data.txt -t lfi.yaml -silent -timeout 7 | tee -a  $output/lfi/$site-lfi.txt
        #rm -rf $output/lfi/$site-final.txt $output/lfi/$site.txt $output/lfi/$site-data.txt   
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Done Check LFI Vulnerabilty ${NT}[${GR}$(cat $output/lfi/$site-lfi.txt  | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/lfi/$site-lfi.txt]"
}
ssti1(){
    if  dependencies
        then
        echo -e "\n${NT}[${RD}*${NT}]${GR} Start Check SSTI Vulnerabilty...${NT}" 
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR} Start On target:${NT} $site"
        echo -e "${NT}[${RD}*${NT}]${GR} Start Enumerate domain!!!${NT}"
        assetfinder --subs-only $site | sort -u > $output/ssti/$site.txt 
        subfinder -silent -d $site >> $output/ssti/$site.txt 
        echo -e "${NT}[${RD}*${NT}]${GR} Finall subdomain!!!${NT}"
        cat $output/ssti/$site.txt | httpx --silent | sort -u > $output/ssti/$site-final.txt
        echo -e "${NT}[${RD}*${NT}]${GR} Crawling wayback data!!!${NT}"
        cat $output/ssti/$site-final.txt | waybackurls | gf ssti | qsreplace | sort -u > $output/ssti/$site-data.txt 
        echo -e "${NT}[${RD}*${NT}]${GR} Start Check ssti Vulnerabilty!!!${NT}"
        nuclei -l $output/ssti/$site-data.txt -t ssti.yaml -silent -timeout 7 | tee -a  $output/ssti/$site-ssti.txt
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Done Check ssti Vulnerabilty ${NT}[${GR}$(cat $output/ssti/$site-ssti.txt  | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/ssti/$site-ssti.txt]"
}
flash(){
    if  dependencies
        then
        echo -e "\n${NT}[${RD}*${NT}]${GR} Start Check cors misconfig flash vulnerabilty...${NT}" 
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR} Start On target:${NT} $site"
        echo -e "${NT}[${RD}*${NT}]${GR} Start Enumerate domain!!!${NT}"
        assetfinder --subs-only $site | sort -u > $output/cors/$site.txt 
        subfinder -silent -d $site >> $output/cors/$site.txt 
        echo -e "${NT}[${RD}*${NT}]${GR} Finall subdomain!!!${NT}"
        cat $output/cors/$site.txt | httpx --silent | sort -u > $output/cors/$site-final.txt
        nuclei -l $output/cors/$site-final.txt -t basic-cors-flash.yaml -silent -timeout 7 | tee -a  $output/cors/$site-cors.txt
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Done Check cors misconfig flash  Vulnerabilty ${NT}[${GR}$(cat $output/cors/$site-cors.txt  | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/cors/$site-cors.txt]"
}
proxy(){
    if dependencies
        then
        subdo $site
        cat $output/subdo/subs-valid.txt | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*))" | sort -u > $output/subdo/valid.txt
        while read sub; do
            curl -H "$agent" -x $burp --ssl-no-revoke -L --url "$sub" -o /dev/null -sk 
        done < $output/subdo/valid.txt
        #echo -e "${NT}[${RD}!${NT}]${GR} Scraping wayback for data...${NT}"
        cat $output/subdo/valid.txt | waybackurls | grep -P "\w+\.js(\?|$)|\w+\.php(\?|$)|\w+\.aspx(\?|$)" | sed 's~http[s]*://~~g' > $output/subdo/wayback.txt
        sleep 2
        while read wayback; do
            curl -H "$agent" --proxy $prox --ssl-no-revoke -L --url "$wayback" -o /dev/null -sk 
        done < $output/subdo/wayback.txt 
    fi
}
header(){
    if  dependencies
        then
        echo -e "\n${NT}[${RD}*${NT}]${GR} Header Injection Checker...${NT}" 
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR} Start On target:${NT} $site"
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start Enumerate domain!!!${NT}"
        assetfinder --subs-only $site > $output/header/$site.txt 
        #subfinder -silent -d $site >> $output/header/$site.txt 
        echo -e "${NT}[${RD}*${NT}]${GR} Finall subdomain!!!${NT}"
        cat $output/header/$site.txt | sort -u > $output/header/subs.txt
        rm -rf $output/subdo/$site.txt
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start Check Header Injection Vulnerabilty!!!${NT}"
        while read line ;do
            echo $line | httpx -silent | hinject -v 
        done < $output/header/subs.txt
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Done Check Header Injection"
}
# Check the Subdomains for working HTTP and HTTPS
hostlive(){
    if  dependencies
        then
        echo -e "${NT}[${RD}*${NT}]${GR} Check the Subdomains for working HTTP and HTTPS servers...${NT}"
        sleep 2
        echo -e "${NT}[${RD}!${NT}]${GR}Start On target:${NT} $site"
        assetfinder --subs-only $site > $output/$site.txt
        subfinder -silent -d $site >> $output/$site.txt
        cat $output/$site.txt | sort -u > $output/subs.txt
        rm -rf $output/$site.txt
        #cat $output/subs.txt | sort -u | httprobe -s -p http:80 | tr -d ":80" | tee -a  > $output/live/http.txt
        #cat $output/subs.txt | sort -u | httprobe -s -p https:443 | tr -d ":443" | tee -a  > $output/live/https.txt
        cat $output/subs.txt | sort -u | httprobe | tee -a  > $output/live/$site-host.txt
        rm -rf $output/$subs.txt 
        for run in $(cat $output/live/$site-host.txt);do
            while [ $run ];do
                echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                break
            done
        done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Resluts Live:${NT}[${GR}$(cat $output/live/$site-host.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/live/$site-host.txt]"  
}
# Scrapping
scraping(){
    if dependencies
        then
        echo -e "${NT}[${RD}*${NT}]${GR} Fetch all the URLs that the Wayback Machine knows about for a domain ...${NT}"
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
        assetfinder --subs-only $site > $output/scraping/$site.txt
        cat $output/scraping/$site.txt | sort -u > $output/scraping/subs.txt
        cat $output/scraping/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
        rm -rf $output/scraping/$subs.txt | rm -rf $output/scraping/$site.txt
        for run in $(cat $output/scraping/$site-list.txt);do
            while [ $run ];do
                echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                break
            done
        done 
    fi 
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping: ${NT}[${GR}$(cat $output/scraping/$site-list.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/scraping/$site-list.txt]"
    
}
# endpoints javascripts
js(){
    if dependencies
        then
        echo -e "${NT}[${RD}*${NT}]${GR} Scraping wayback for data js...${NT}"
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
        assetfinder --subs-only $site > $output/$site.txt
        cat $output/$site.txt | sort -u > $output/subs.txt
        rm -rf $output/$site.txt
        cat $output/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
        rm -rf $output/$subs.txt
        cat $output/scraping/$site-list.txt | grep -P "\w+\.js(\?|$)" | uniq | sort -u > $output/scraping/jsurls.txt
        rm -rf $output/scraping/$site-list.txt
        for run in $(cat $output/scraping/jsurls.txt);do
            while [ $run ];do
                echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                break
            done
        done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping ${NT}[${GR}$(cat $output/scraping/jsurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/scraping/$site-jsurls.txt]"
    
}
jsurl(){
    if dependencies 
        then
        echo -e "${NT}[${RD}*${NT}]${GR} Downloading js files...${NT}"
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
        #assetfinder --subs-only $site | sort -u > $output/subs.txt
        echo $site > $output/subs.txt
        echo -e "${RD}[*]${GR} downloading js files"
        while read sub;do
                gau -subs $sub | grep "\.js$" | anti-burl | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" | sort -u | tee -a > $output/js_file
        done < $output/subs.txt          
        cd $output/js/          
        while read line; do
            curl -s "$line" | js-beautify > $( echo "$line" | sed -e 's/[/]/_/g' | sed -e 's/:/./g') 
        done < ../js_file
        cd ..
        for file in ./js/*; do
            gf js $file      
        done
        cd .. 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found js Download ${NT}[${GR}$(ls $output/js | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$(pwd /$output/)]"
      
}
jstatus(){
    if dependencies
        then
        echo -e "${NT}[${RD}*${NT}]${GR} Check for the status JavaScript...${NT}"
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
        assetfinder --subs-only $site > $output/$site.txt
        cat $output/$site.txt | sort -u > $output/subs.txt
        rm -rf $output/$site.txt
        cat $output/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
        rm -rf $output/$subs.txt
        cat $output/scraping/$site-list.txt | grep -P "\w+\.js(\?|$)" | uniq | sort -u > $output/scraping/jsurls.txt
        echo -e "=============================================="
        echo -e "  Staus        |  Size          |  Links"
        echo -e "=============================================="
        for js in $(cat $output/scraping/jsurls.txt | parallel -j50 -q curl -w ${GR}"Status:${CY}%{http_code}\t ${GR}Size:${CY}%{size_download}\t ${GR}Url:${CY}%{url_effective}\n" -o /dev/null -sk | tee -a $output/scraping/$site-jstatus.txt );do           
                echo -e "${RD}[${GR}*${RD}] $js"
        done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check for the status JavaScript ${NT}[${GR}$(cat $output/scraping/$site-jstatus.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/scraping/$site-jstatus.txt]"
    
}
php(){
    if dependencies 
        then 
        echo -e "${NT}[${RD}*${NT}]${GR} Scraping wayback for data php...${NT}"
        sleep 2
        echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
        assetfinder --subs-only $site > $output/$site.txt
        cat $output/$site.txt | sort -u > $output/subs.txt
        rm -rf $output/$site.txt
        cat $output/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
        rm -rf $output/$subs.txt
        cat $output/scraping/$site-list.txt | sort -u | grep -P "\w+\.php(\?|$)" | sort -u > $output/scraping/phpurls.txt
        rm -rf $output/scraping/$site-list.txt
        for run in $(cat $output/scraping/phpurls.txt);do
            while [ $run ];do
                 echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                 break
            done
        done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping${NT} [${GR}$(cat $output/scraping/phpurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR} [$output/scraping/$site-phpurls.txt]"
    
}
asp(){
    if dependencies 
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Scraping wayback for data aspx...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder --subs-only $site > $output/$site.txt
            cat $output/$site.txt | sort -u > $output/subs.txt
            rm -rf $output/$site.txt
            cat $output/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
            rm -rf $output/$subs.txt
            cat $output/scraping/$site-list.txt | sort -u | grep -P "\w+\.aspx(\?|$)" | sort -u > $output/scraping/aspurls.txt
            rm -rf $output/scraping/$site-list.txt
            for run in $(cat $output/scraping/aspurls.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping ${NT}[${GR}$(cat $output/scraping/aspurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/scraping/$site-aspurls.txt]"
    
    
}
html(){   
    if dependencies 
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Scraping wayback for data HTML...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder --subs-only $site > $output/$site.txt
            cat $output/$site.txt | sort -u > $output/subs.txt
            rm -rf $output/$site.txt | cat $output/subs.txt | waybackurls | sort -u > $output/scraping/$site-list.txt
            rm -rf $output/$subs.txt | cat $output/scraping/$site-list.txt | sort -u | grep -P "\w+\.html(\?|$)" | sort -u > $output/scraping/htmlurls.txt
            rm -rf $output/scraping/$site-list.txt
            for run in $(cat $output/scraping/htmlurls.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Scraping ${NT}[${GR}$(cat $output/scraping/htmlurls.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/scraping/$site-htmlurls.txt]"
    
}
respon(){
    if dependencies 
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Takes a list of URLs and returns their HTTP response codes...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder --subs-only $site > $output/$site.txt
            cat $output/$site.txt | sort -u > $output/subs.txt 
            rm -rf $output/$site.txt | cat $output/subs.txt | hakrawler -plain | hakcheckurl | grep -v 404 > $output/respon/$site-dir.txt 
            rm -rf $output/$subs.txt 
            for run in $(cat $output/respon/$site-dir.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Status Code ${NT}[${GR}$(cat $output/respon/$site-dir.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/respon/$site-dir.txt]"
    
}
redirec(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check Open Redirection...]${NT}"
            sleep 2
            echo -e "${RD}[+] Start On target:${NT} $site"
            assetfinder $site | gau --subs | sort -u >  $output/redirec/$site.txt
            cat $output/redirec/$site.txt | grep -e 'redirect\|redirect=\|url\|url=\|next=\|dest=\|destination\|return\|go\|redirect_uri\|continue=\|return_path=\|externalLink=\|URL' > $output/redirec/$site-redirect.txt
            for run in $(cat $output/redirec/$site-redirect.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check URL Redirection${NT} [${GR}$(cat $output/redirec/$site-redirec.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR}Success Saved:${GR}[$output/redirec/]"
    
}
ssrf(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Blind SSRF testing...${NT}"
            sleep 2
            ssr=`cat callback.txt`
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            waybackurls $site | sort -u > $output/ssrf/$site-ssrf.txt
            gau $site >> $output/ssrf/$site-ssrf.txt
            cat $output/ssrf/$site-ssrf.txt | sort | uniq | grep "?" | qsreplace -a | qsreplace $ssr > $output/ssrf/$site-ssrf2.txt
            sed -i "s|$|\&dest=$ssr\&redirect=$ssr\&uri=$ssr\&path=$ssr\&continue=$ssr\&url=$ssr\&window=$ssr\&next=$ssr\&data=$ssr\&reference=$ssr\&ssr=$ssr\&html=$ssr\&val=$ssr\&validate=$ssr\&domain=$ssr\&callback=$ssr\&return=$ssr\&page=$ssr\&feed=$ssr\&host=$ssr&\port=$ssr\&to=$ssr\&out=$ssr\&view=$ssr\&dir=$ssr\&show=$ssr\&navigation=$ssr\&open=$ssr|g" $output/ssrf/$site-ssrf2.txt
            echo -e "${RD}[+] Start On FFUF:${NT}"
            ffuf -w $output/ssrf/$site-ssrf2.txt -u FUZZ -t 50 -of md > $output/ssrf/$site-ssrf3.md
            for run in $(cat $output/ssrf/$site-ssrf3.md);do
                while [ $run ];do
                    echo -e "$run\n"
                    break
                done
            done 
    fi
    #echo -e "Found Check SSRF [${GR}$(cat $output/ssrf/$site-ssrf3.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/ssrf/$site-ssrf3.txt]\n"
    
    
}
xss(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} XSS testing...${NT}"
            sleep 2
            xsss=`cat xss.ht`
            linee=".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)"
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site  sort -u > $output/xss/$site.txt
            cat $output/xss/$site.txt | hakrawler -plain -usewayback -wayback | grep "=" | egrep -iv "$linee" | \
            qsreplace -a | dalfox pipe -b $xsss -o $output/xss/$site-xss.txt 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/xss/$site-xss.txt]"
    
} 
cors(){
    if dependencies
        then 
            echo -e "${NT}[${RD}*${NT}]${GR} CORS misconfiguration vulnerabilities scanner...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/cors/$site.txt
            subfinder -silent -d $site >> $output/cors/$site.txt
            cat $output/cors/$site.txt | sort -u > $output/cors/$site-1.txt
            cat $output/cors/$site-1.txt | httprobe > $output/cors/cors.txt
            cat $output/cors/cors.txt | CORS-Scanner | tee $output/cors/$site-cors.txt
            rm -rf $output/cors/$site.txt | rm -rf $output/cors/cors.txt
            for run in $(cat $output/cors/cors.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/cors/$site-cors.txt]"
    
}
ssti(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check SSTI Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/ssti/$site.txt
            subfinder -silent -d $site >> $output/ssti/$site.txt
            cat $output/ssti/$site.txt | sort -u > $output/ssti/$site-1.txt
            cat $output/ssti/$site-1.txt | waybackurls | sort -u > $output/ssti/ssti.txt
            cat $output/ssti/ssti.txt | gf ssti | tee -a > $output/ssti/$site-ssti.txt
            rm -rf $output/ssti/$site.txt | rm -rf $output/ssti/ssti.txt
            for run in $(cat $output/ssti/$site-ssti.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check SSTI Parameters${NT} [${GR}$(cat $output/ssti/$site-ssti.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/ssti/$site-ssti.txt]"
    
}
check_r(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check redirec Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/redirec/$site.txt
            subfinder -silent -d $site >> $output/redirec/$site.txt
            cat $output/idor/$site.txt | sort -u $output/idor/$site-1.txt
            cat $output/redirec/$site-1.txt | waybackurls | sort -u > $output/redirec/redirec.txt
            cat $output/redirec/redirec.txt | gf redirect | tee -a > $output/redirec/$site-redirec.txt
            rm -rf $output/redirec/$site.txt | rm -rf $output/redirec/redirec.txt
            for run in $(cat $output/redirec/redirec.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check redirec Parameters ${NT}[${GR}$(cat $output/redirec/$site-redirec.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/redirec/$site-redirec.txt]"
    
}
gfxss(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check XSS Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/xss/$site.txt
            subfinder -silent -d $site >> $output/xss/$site.txt
            cat $output/xss/$site.txt | sort -u > $output/xss/$site-1.txt
            cat $output/xss/$site-1.txt | waybackurls | sort -u > $output/xss/xss.txt
            cat $output/xss/xss.txt | gf xss | tee -a > $output/xss/$site-xss.txt
            rm -rf $output/xss/$site.txt | rm -rf $output/xss/xss.txt
            for run in $(cat $output/xss/$site-xss.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check XSS Parameters${NT} [${GR}$(cat $output/xss/$site-xss.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/xss/$site-xss.txt]"
    
}
idor(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check IDOR Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/idor/$site.txt
            subfinder -silent -d $site >> $output/idor/$site.txt
            cat $output/idor/$site.txt | sort -u > $output/idor/$site-1.txt
            cat $output/idor/$site-1.txt | waybackurls | sort -u > $output/idor/idor.txt
            cat $output/idor/idor.txt | gf idor | tee -a > $output/idor/$site-idor.txt
            rm -rf $output/idor/$site.txt | rm -rf $output/idor/idor.txt
            for run in $(cat $output/idor/$site-idor.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check IDOR Parameters${NT} [${GR}$(cat $output/idor/$site-idor.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/idor/$site-idor.txt]"
    
}
rce(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check RCE Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/rce/$site.txt
            subfinder -silent -d $site >> $output/rce/$site.txt
            cat $output/rce/$site.txt | sort -u > $output/rce/$site-1.txt
            cat $output/rce/$site-1.txt | waybackurls | sort -u > $output/rce/rce.txt
            cat $output/rce/rce.txt | gf rce | tee -a > $output/idor/$site-rce.txt
            rm -rf $output/rce/$site.txt | rm -rf $output/rce/rce.txt
            for run in $(cat $output/idor/$site-rce.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check RCE Parameters ${NT}[${GR}$(cat $output/rce/$site-rce.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/rce/$site-rce.txt]"
    
}
traversal(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check img-traversal Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/traversal/$site.txt
            subfinder -silent -d $site >> $output/traversal/$site.txt
            cat $output/traversal/$site.txt | sort -u > $output/traversal/$site-1.txt
            cat $output/traversal/$site-1.txt | waybackurls | sort -u > $output/traversal/traversal.txt
            cat $output/traversal/traversal.txt | gf img-traversal | tee -a > $output/idor/$site-traversal.txt
            rm -rf $output/traversal/$site.txt | rm -rf $output/traversal/traversal.txt
            for run in $(cat $output/idor/$site-traversal.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check traversal Parameters ${NT}[${GR}$(cat $output/traversal/$site-traversal.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/traversal/$site-traversal.txt]"
    
}
lfi(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check LFI Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/lfi/$site.txt
            subfinder -silent -d $site >> $output/lfi/$site.txt
            cat $output/lfi/$site.txt | sort -u > $output/lfi/$site-1.txt
            cat $output/lfi/$site-1.txt | waybackurls | sort -u > $output/lfi/lfi.txt
            cat $output/lfi/lfi.txt | gf lfi | tee -a > $output/lfi/$site-lfi.txt
            rm -rf $output/lfi/$site.txt | rm -rf $output/lfi/lfi.txt | rm -rf $output/lfi/$site.txt
            for run in $(cat $output/lfi/$site-lfi.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check LFI Parameters ${NT}[${GR}$(cat $output/lfi/$site-lfi.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/lfi/$site-lfi.txt]"
    
}
sqli(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check SQLI Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder  $site > $output/sqli/$site.txt
            subfinder -silent -d $site >> $output/sqli/$site.txt
            cat $output/sqli/$site.txt | sort -u $output/sqli/$site-1.txt
            cat $output/sqli/$site-1.txt | waybackurls | sort -u > $output/sqli/sqli.txt
            cat $output/sqli/sqli.txt | gf sqli | tee -a > $output/lfi/$site-sqli.txt
            rm -rf $output/sqli/$site.txt | rm -rf $output/sqli/sqli.txt
            for run in $(cat $output/lfi/$site-sqli.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check SQLI Parameters${NT} [${GR}$(cat $output/sqli/$site-sqli.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/sqli/$site-sqli.txt]"
    
}
take(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check Takeover...]${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder $site > $output/takeover/$site.txt
            subfinder -silent -d $site >> $output/takeover/$site.txt 
            cat $output/takeover/$site.txt | sort -u > $output/takeover/$site-1.txt
            SubOver -l $output/takeover/$site-1.txt -v -a -https > $output/takeover/$site-takeover.txt
           # cat $output/takeover/$site-1.txt | waybackurls | sort -u > $output/takeover/takeover.txt
           # cat $output/takeover/takeover.txt | gf takeovers | tee -a > $output/takeover/$site-takeover.txt
           # rm -rf $output/takeover/$site.txt | rm -rf $output/takeover/takeover.txt
            for run in $(cat $output/takeover/$site-takeover.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check Takeover${NT} [${GR}$(cat $output/takeover/$site-takeover.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/takeover/$site-takeover.txt]"
    
}
dirbuster(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Start dir bruteforce...${NT}"
            sleep 2  
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            dirsearch -url $site --wordlist $wordlist | tee -a $output/dir/$site-dir.txt
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/dir/$site-dir.txt]"
    
}
smuggling(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check HTTP smuggling ...${NT}"
            sleep 2  
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            python3 tools/http-smuggling-test.py $site
    fi
}
api(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check api keys...${NT}"
            sleep 2  
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder $site| waybackurls | sort -u > $output/api/api.txt
            cat $output/api/api.txt | gf api-keys | tee -a > $output/api/$site-api.txt
            rm -rf $output/api/api.txt
            for run in $(cat $output/api/$site-api.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check api keys${NT} [${GR}$(cat $output/api/$site-api.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/api/$site-api.txt]"
    
}
ssrf2(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Check ssrf Parameters...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder $site | waybackurls | sort -u > $output/ssrf/ssrf.txt
            cat $output/ssrf/ssrf.txt | gf ssrf | tee -a > $output/ssrf/$site-ssrf.txt
            rm -rf $output/ssrf/ssrf.txt
            for run in $(cat $output/ssrf/$site-ssrf.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found Check ssrf${NT} [${GR}$(cat $output/ssrf/$site-ssrf.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/ssrf/$site-ssrf.txt]"
    
}
aws(){
    if dependencies
        then
            echo -e "${NT}[${RD}!${NT}]${GR} Amazon S3 bucket enumeration...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Check aws:${NT} $site"
            echo -e "${NT}[${RD}!${NT}]${GR} It takes a long time to wait ..."
            for run in $(s3enum --wordlist AWS/wordlist.txt --suffixlist AWS/suffixlist.txt --threads 10 $site);do
                while [ $run ];do
                    echo -e "\n${NT}[${dat}]${GR}[+]resluts:${NT} $run" | tee -a $output/aws/$site-aws.txt
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found ${NT}[${GR}$(cat $output/aws/$site-aws.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/aws/$site-aws.txt]"
    
}
int(){
    if dependencies
        then
            echo -e "${NT}[${RD}*${NT}]${GR} Interestingparams...${NT}"
            sleep 2
            echo -e "${NT}[${RD}*${NT}]${GR} Start On target:${NT} $site"
            assetfinder $site | waybackurls | sort -u > $output/int/int.txt
            cat $output/int/int.txt | gf interestingparams | tee -a > $output/int/$site-int.txt
            rm -rf $output/int/int.txt
            for run in $(cat $output/int/$site-int.txt);do
                while [ $run ];do
                    echo -e "${NT}[${dat}]${GR}[+]resluts:${NT} $run"
                    break
                done
            done 
    fi
    echo -e "${NT}[${RD}*${NT}]${GR} Found ${NT}[${GR}$(cat $output/int/$site-int.txt | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/int/$site-int.txt]"
    
}

verbose(){
    if dependencies
        then
        echo -e "${NT}[${RD}*${NT}]${GR} Verbose...${NT}"
        sleep 2
        echo -e "${RD}[+] Start On target:${NT} $site"
        assetfinder -subs-only $site | waybackurls | sort -u > $output/verbose/out.txt
        cat $output/verbose/out.txt | httpx -silent -content-length -status-code -verbose -title -vhost -json | jq > $output/verbose/$site-out.json
        rm -rf $output/verbose/out.txt 
            for run in $(cat $output/verbose/$site-out.json);do
                while [ $run ];do
                    echo -e "$run"
                    break
                done
            done 
    fi
    #echo -e "\nFound Check verbose  [${GR}$(cat $output/verbose/$site-out.json | wc -l)${NT}]"
    echo -e "${NT}[${RD}*${NT}]${GR} Success Saved:${GR}[$output/verbose/$site-out.json]"
   
}
logo(){
 echo -e "${RD}

oo_____oo_ooooooo______oooo_________________________________
_oo___oo__oo____oo___oo____oo_oo_ooo___ooooo___oooo___oooo__
__oo_oo___oo____oo__oo________ooo___o_oo___oo_oo___o_oo___o_
___ooo____ooooooo___oo________oo______oo___oo___oo_____oo___
__oo_oo___oo____oo___oo____oo_oo______oo___oo_o___oo_o___oo_
_oo___oo__oo_____oo____oooo___oo_______ooooo___oooo___oooo__
____________________________________________________________ ${CY}

        -+---=[ Codename:${GR}$codename ${RD}  ]=---+-
        -+---=[ Version:${GR}$ver${NT} ]=---+-
        -+---=[ github:$follow   ]=---+-      
"
}
help(){
        logo
        echo -e "${GR}
+-${RD}INF:${GR}----------------------------------------------------------------------------------------+        
|     ${NT} XRCross is a Reconstruction, Scanner, and a tool for penetration/BugBounty testing.${GR}    | 
|     ${NT} This tool was built to test (XSS|SSRF|CORS|SSTI|IDOR|RCE|LFI|SQLI) vulnerabilities ${GR}    |       
+---------------------------------------------------------------------------------------------+  ${GR}      
       
        Example: $0 -u/--url example.site <arguments>
                $0 <arguments> example.site <arguments> 
        
        Optional Arguments:
                -h /--help      | show this help message and exit
                -u /--url       | URLs
                    -rc         | Check HTTP response codes 
                    --subdo     | Check Subdomains
                      --burp    | Urls Burpsuite crawling and scanning 
                    --github    | Enumerate Subdomain for github And Using Api github
                    --dir       | Dir bruteforce
                      -w        | Wordlist file to use for enumeration. (default wordlists/wordlists.txt)
                    --host      | Host Live Check
                    --header    | Host header injection check
                    --jst       | JavaScript Status
                    --ssrf      | Blind SSRF testing
                    --cors      | CORS misconfiguration scanner
                      -flash    | Basic cors misconfig flash
                    --takeover  | Check Posible Takeover
                    --verbose   | Verbose status code
                    --smuggling | HTTP smuggling attack and check
                    --jsurl     | Gathering all js urls
                    --xss       | XSS testing
                    --lfi       | LFI Check Vulnerabilty
                    --ssti      | SSTI Check Vulnerabilty
                -gf             | GF parameters grep
                    -ssti       | Check SSTI Parameters
                    -idor       | Check IDOR Parameters
                    -rce        | Check RCE Parameters
                    -lfi        | Check LFI Parameters
                    -sqli       | Check SQLI Parameters
                    -ssrf       | Check SSRF Parameters
                    -xss        | Check XSS Parameters
                    -img        | Check img-traversal Parameters
                    -int        | Interestingparams
                -sw/-scrw       | Scraping wayback for data
                    -js         | Jsurls 
                    -php        | Phpurls
                    -asp        | ASP
                    -html       | Html
                -aws            | Amazon S3 bucket enumeration 
                -r  normal      | Check open redirection
                    -redirec    | Check redirec Parameters
                -o              | Outfile
 "       
        exit 1
}

if [ -z "$site" ];then
    logo
else

while true; do
    case "$site" in
        "-r" ) site="$2"
            if [[ $3 == "-o" ]]; 
                then
                output="$4/$site"
                mkdir -p "$output"/"redirec"
                logo
                redirec $site
                exit 1
            elif [[ $3 == "-redirec" ]]; 
                then
                output="$site"
                mkdir -p "$output"/"redirec"
                logo
                check_r $site
                exit 1

            else
                output="$site"
                mkdir -p "$output"/"redirec"
                logo
                redirec $site
                exit 1
            fi
            shift
            ;;
        "-gf") site="$2"
            if [[ $3 == "-ssti" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"ssti"
                    logo
                    ssti $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"ssti"
                    logo
                    ssti $site
                    exit 1
                fi
            elif [[ $3 == "-idor" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"idor"
                    logo
                    idor $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"idor"
                    logo
                    idor $site
                    exit 1
                fi
            elif [[ $3 == "-xss" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"xss"
                    logo
                    gfxss $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"xss"
                    logo
                    gfxss $site
                    exit 1
                fi
            elif [[ $3 == "-int" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"int"
                    logo
                    int $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"int"
                    logo
                    int $site
                    exit 1
                fi
            elif [[ $3 == "-api" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"api"
                    logo
                    api $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"api"
                    logo
                    api $site
                    exit 1
                fi
               
          #  elif [[ $3 == "-dt" ]]
          #      then
          #      if [[ $4 == "-o" ]];
          #          then
          #          output="$5/$site"
          #          mkdir -p "$output"/"dt"
          #          logo
          #          dt $site
          #      else
           #         output="$site"
           #         mkdir -p "$output"/"dt"
           #         logo
           #         dt $site
           #     fi
                
            elif [[ $3 == "-rce" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"rce"
                    logo
                    rce $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"rce"
                    logo
                    rce $site
                    exit 1
                fi
                
            elif [[ $3 == "-lfi" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"lfi"
                    logo
                    lfi $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"lfi"
                    logo
                    lfi $site
                    exit 1
                fi
                
            elif [[ $3 == "-sqli" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"sqli"
                    logo
                    sqli $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"sqli"
                    logo
                    sqli $site
                    exit 1
                fi
                
            elif [[ $3 == "-ssrf" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"ssrf"
                    logo
                    ssrf2 $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"ssrf"
                    logo
                    ssrf2 $site
                    exit 1
                fi
            elif [[ $3 == "-img" ]];
                then
                if [[ $4 == "-o" ]];
                    then
                    output="$5/$site"
                    mkdir -p "$output"/"traversal"
                    logo
                    traversal $site
                    exit 1
                else
                    output="$site"
                    mkdir -p "$output"/"traversal"
                    logo
                    traversal $site
                    exit 1
                fi
                
            else
                logo
                exit 1
            fi
            shift
            ;;
        "-sw" | "--scrw") 
            site="$2"
                    if [[ $3 == "-o" ]]
                    then
                        output="$4/$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        scraping $site
                        exit 1
                    elif [[ $3 == "-js" ]]
                    then
                        output="$site"
                        mkdir -p "$output/scraping"
                        logo
                        js $site
                        exit 1
                   # elif [[ $3 == "-jvar" ]]
                   # then
                    #    output="$site"
                     #   mkdir -p "$output/scraping"
                     #   logo
                      #  jvar $site
                    elif [[ $3 == "-php" ]]
                    then
                        output="$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        php $site
                        exit 1
                    elif [[ $3 == "-asp" ]]
                    then
                        output="$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        asp $site
                        exit 1
                    elif [[ $3 == "-html" ]]
                    then
                        output="$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        html $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        scraping $site
                        exit 1
                    fi
            shift
            ;;
        "-u" | "--url") site="$2"
            if [[ $3 == "-o" ]];
                then
                output="$4/$site"
                mkdir -p "$output"
                logo
                all $site
                exit 1
            elif [[ $3 == "--dir" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"dir"
                        logo
                        dirbuster $site
                        exit 1
                    elif [[ $4 == "-w" ]];
                    then
                        wordlist="$5"
                        output="$site"
                        mkdir -p "$output"/"dir"
                        logo
                        dirbuster $site
                        exit 1
                    else
                        logo
                        echo -e "${NT}[${RD}*${NT}]${GR} Wordlists Not Found!!!\n "
                        exit 1
                    fi
            elif [[ $3 == "--header" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"header"
                        logo
                        header $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"header"
                        logo
                        header $site
                        exit 1
                    fi
            elif [[ $3 == "--lfi" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"lfi"
                        logo
                        LFI1 $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"lfi"
                        logo
                        LFI1 $site
                        exit 1
                    fi
            elif [[ $3 == "--ssti" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"ssti"
                        logo
                        ssti1 $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"ssti"
                        logo
                        ssti1 $site
                        exit 1
                    fi
            elif [[ $3 == "--smuggling" ]];
                then
                    logo
                    smuggling $site
                    exit 1
            elif [[ $3 == "--jsurl" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"js"
                        logo
                        jsurl $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"js"
                        logo
                        jsurl $site
                        exit 1
                    fi
            elif [[ $3 == "--github" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"github"
                        logo
                        github $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"github"
                        logo
                        github $site
                        exit 1
                    fi
            elif [[ $3 == "-s" ]] || [[ $3 == "--subdo" ]];
                then
                    if [[ $4 == "-o" ]];
                    then
                        output="$5/$site"
                        mkdir -p "$output"/"subdo"
                        logo
                        subdo $site 
                        exit 1
                    elif [[ $4 == "--burp" ]];
                    then
                        burp="$5"
                        output="$site"
                        mkdir -p "$output"/"subdo"
                        logo
                        proxy
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"subdo"
                        logo
                        subdo $site
                        exit 1
                    fi
                shift
            elif [[ $3 == "-H" ]] || [[ $3 == "--host" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"live"
                        logo
                        hostlive $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"live"
                        logo
                        hostlive $site
                        exit 1
                    fi
            elif [[ $3 == "--jst" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        jstatus $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"scraping"
                        logo
                        jstatus $site
                        exit 1
                    fi
            elif [[ $3 == "-r" ]] || [[ $3 == "--rc" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"respon"
                        logo
                        respon $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"respon"
                        logo
                        respon $site
                        exit 1
                    fi
            elif [[ $3 == "-xs" ]] || [[ $3 == "--xss" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"xss"
                        logo
                        xss $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"xss"
                        logo
                        xss $site
                        exit 1
                    fi
            elif [[ $3 == "-cs" ]] || [[ $3 == "--cors" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"cors"
                        logo
                        cors $site
                        exit 1
                    elif [[ $4 == "-flash" ]];
                    then
                        #burp="$5"
                        output="$site"
                        mkdir -p "$output"/"cors"
                        logo
                        flash $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"cors"
                        logo
                        cors $site
                        exit 1
                    fi
            elif [[ $3 == "-Ss" ]] || [[ $3 == "--ssrf" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"ssrf"
                        logo
                        ssrf $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"ssrf"
                        logo
                        ssrf $site
                        exit 1
                    fi
            elif [[ $3 == "-T" ]] || [[ $3 == "--takeover" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"takeover"
                        logo
                        take $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"takeover"
                        logo
                        take $site
                        exit 1
                    fi
            elif [[ $3 == "-v" ]] || [[ $3 == "--verbose" ]];
                then
                     if [[ $4 == "-o" ]];
                        then
                        output="$5/$site"
                        mkdir -p "$output"/"verbose"
                        logo
                        verbose $site
                        exit 1
                    else
                        output="$site"
                        mkdir -p "$output"/"verbose"
                        logo
                        verbose $site
                        exit 1
                    fi
            else
                output="$site"
                mkdir -p "$output"
                logo
                all $site
                exit 1
            fi
            shift
            ;;
        "-h" | "--help")
            help
            exit 1
            ;;
        "-aws") site="$2"
            if [[ $3 == "-o" ]]; 
                then
                output="$4/$site"
                mkdir -p "$output"/"aws"
                logo
                aws $site
                exit 1
            else 
                output="$site"
                mkdir -p "$output"/"aws"
                logo
                aws $site
                exit 1
            fi
            shift
            ;;
        esac
        shift
done
fi
